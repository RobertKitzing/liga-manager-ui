{
  "version": 3,
  "sources": ["../../../../../../node_modules/@aparajita/capacitor-dark-mode/dist/esm/base.js"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-magic-numbers */\nimport { Capacitor, WebPlugin } from '@capacitor/core';\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { DarkModeAppearance } from './definitions';\nimport { isDarkColor, isValidHexColor, normalizeHexColor } from './utils';\nconst kDefaultBackgroundVariable = '--background';\n// eslint-disable-next-line import/prefer-default-export\nexport class DarkModeBase extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.appearance = DarkModeAppearance.system;\n    this.darkModeClass = 'dark';\n    this.registeredListener = false;\n    this.appearanceListeners = new Set();\n    this.syncStatusBar = true;\n    this.statusBarBackgroundVariable = kDefaultBackgroundVariable;\n    this.handleTransitions = true;\n  }\n  // @native(callback)\n  /* eslint-disable @typescript-eslint/no-unused-vars,@typescript-eslint/require-await */\n  // noinspection JSUnusedLocalSymbols\n  async setNativeDarkModeListener(options, callback) {\n    throw this.unimplemented('setNativeDarkModeListener is native only');\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars,@typescript-eslint/require-await */\n  async init({\n    cssClass,\n    statusBarBackgroundVariable,\n    getter,\n    setter,\n    syncStatusBar,\n    statusBarStyleGetter,\n    disableTransitions\n  } = {}) {\n    if (cssClass) {\n      // Remove the old class if it exists\n      document.documentElement.classList.remove(this.darkModeClass);\n      this.darkModeClass = cssClass;\n    }\n    this.statusBarBackgroundVariable =\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    statusBarBackgroundVariable || kDefaultBackgroundVariable;\n    if (typeof getter === 'function') {\n      this.getter = getter;\n    }\n    if (typeof setter === 'function') {\n      this.setter = setter;\n    }\n    if (typeof syncStatusBar === 'boolean' || syncStatusBar === 'textOnly') {\n      this.syncStatusBar = syncStatusBar;\n    }\n    if (typeof statusBarStyleGetter === 'function') {\n      this.statusBarStyleGetter = statusBarStyleGetter;\n    }\n    if (typeof disableTransitions === 'boolean') {\n      this.handleTransitions = disableTransitions;\n    }\n    if (!this.registeredListener) {\n      await this.registerDarkModeListener();\n    }\n    await this.update();\n  }\n  async configure(options) {\n    return this.init(options);\n  }\n  async addAppearanceListener(listener) {\n    this.appearanceListeners.add(listener);\n    return Promise.resolve({\n      remove: () => this.appearanceListeners.delete(listener)\n    });\n  }\n  disableTransitions() {\n    if (!this.handleTransitions) {\n      return;\n    }\n    if (!this.disableTransitionsStyle) {\n      this.disableTransitionsStyle = document.createElement('style');\n      this.disableTransitionsStyle.innerText = `* { transition: none !important; --transition: none !important; } ion-content::part(background) { transition: none !important; }`;\n    }\n    document.head.appendChild(this.disableTransitionsStyle);\n  }\n  enableTransitions() {\n    if (!this.handleTransitions) {\n      return;\n    }\n    if (this.disableTransitionsStyle) {\n      const style = this.disableTransitionsStyle;\n      window.setTimeout(() => {\n        if (document.head.contains(style)) {\n          document.head.removeChild(style);\n        }\n      }, 100);\n    }\n  }\n  async update(data) {\n    // Assume the appearance and dark mode did not change\n    const oldDarkMode = document.body.classList.contains(this.darkModeClass);\n    let darkMode;\n    let appearance = this.appearance;\n    // The appearance changed, either by the system or by the user.\n    // See if there is a stored appearance.\n    if (this.getter) {\n      const getterResult = await this.getter();\n      if (getterResult) {\n        appearance = getterResult;\n      }\n    }\n    // If the appearance is system, use the current dark mode.\n    if (appearance === DarkModeAppearance.system) {\n      darkMode = data ? data.dark : (await this.isDarkMode()).dark;\n    } else {\n      // Otherwise, use the appearance to determine the dark mode.\n      darkMode = appearance === DarkModeAppearance.dark;\n    }\n    // If the dark mode changed, update the body class and status bar.\n    if (darkMode !== oldDarkMode) {\n      this.disableTransitions();\n      document.body.classList[darkMode ? 'add' : 'remove'](this.darkModeClass);\n      this.enableTransitions();\n    }\n    // Always update the status bar to match the dark mode. This ensures\n    // the status bar stays in sync when init() is called.\n    if (Capacitor.isNativePlatform()) {\n      await this.handleStatusBar(darkMode);\n    }\n    // If the appearance changed, update the stored appearance.\n    if (this.setter && this.appearance !== appearance) {\n      await this.setter(appearance);\n    }\n    // Notify listeners of the changes by the system.\n    if (data) {\n      for (const listener of this.appearanceListeners) {\n        listener(data);\n      }\n    }\n    this.appearance = appearance;\n    return Promise.resolve(this.appearance);\n  }\n  getBackgroundColor() {\n    // Try to retrieve the background color variable value from <ion-content>.\n    const content = document.querySelector('ion-content');\n    if (content) {\n      const color = getComputedStyle(content).getPropertyValue(this.statusBarBackgroundVariable).trim();\n      if (isValidHexColor(color)) {\n        return normalizeHexColor(color);\n      } else {\n        console.warn(`Invalid hex color '${color}' for ${this.statusBarBackgroundVariable}`);\n      }\n    }\n    return '';\n  }\n  async handleStatusBar(darkMode) {\n    // On iOS we always need to update the status bar appearance\n    // to match light/dark mode. On Android we only do so if the user\n    // has explicitly requested it.\n    let setStatusBarStyle = Capacitor.getPlatform() === 'ios';\n    // By default the status bar style is the same as the appearance.\n    let statusBarStyle = darkMode ? Style.Dark : Style.Light;\n    // By default we will not change the background color of the status bar.\n    let color = '';\n    if (this.syncStatusBar && Capacitor.getPlatform() === 'android') {\n      // Assume the style will change when the appearance changes.\n      setStatusBarStyle = true;\n      // If the sync mode is not 'textOnly', try to get the background color from <ion-content>.\n      if (this.syncStatusBar !== 'textOnly') {\n        color = this.getBackgroundColor();\n      }\n      if (this.statusBarStyleGetter) {\n        // If there is a style getter, use it to determine the status bar style.\n        const style = await this.statusBarStyleGetter(statusBarStyle, color);\n        if (style) {\n          statusBarStyle = style;\n        }\n      } else if (color) {\n        // If there is no getter and we were able to get the <ion-content> color,\n        // set the status bar style based on the color.\n        statusBarStyle = isDarkColor(color) ? Style.Dark : Style.Light;\n      } else {\n        // If the background color did not change, no need to update the status bar.\n        setStatusBarStyle = false;\n      }\n    }\n    const actions = [];\n    if (color) {\n      actions.push(StatusBar.setBackgroundColor({\n        color\n      }));\n    }\n    if (setStatusBarStyle) {\n      actions.push(StatusBar.setStyle({\n        style: statusBarStyle\n      }));\n    }\n    if (actions.length) {\n      await Promise.all(actions);\n    }\n  }\n}"],
  "mappings": "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",
  "names": []
}
