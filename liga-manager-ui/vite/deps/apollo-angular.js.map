{
  "version": 3,
  "sources": ["../../../../../../node_modules/apollo-angular/fesm2022/ngApollo.mjs"],
  "sourcesContent": ["import { Observable, queueScheduler, observable, from } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { NetworkStatus, ApolloClient, gql as gql$1 } from '@apollo/client/core';\nimport { map, startWith, observeOn } from 'rxjs/operators';\nfunction fromPromise(promiseFn) {\n  return new Observable(subscriber => {\n    promiseFn().then(result => {\n      if (!subscriber.closed) {\n        subscriber.next(result);\n        subscriber.complete();\n      }\n    }, error => {\n      if (!subscriber.closed) {\n        subscriber.error(error);\n      }\n    });\n    return () => subscriber.unsubscribe();\n  });\n}\nfunction useMutationLoading(source, enabled) {\n  if (!enabled) {\n    return source.pipe(map(result => ({\n      ...result,\n      loading: false\n    })));\n  }\n  return source.pipe(startWith({\n    loading: true\n  }), map(result => ({\n    ...result,\n    loading: !!result.loading\n  })));\n}\nclass ZoneScheduler {\n  zone;\n  constructor(zone) {\n    this.zone = zone;\n  }\n  now = Date.now ? Date.now : () => +new Date();\n  schedule(work, delay = 0, state) {\n    return this.zone.run(() => queueScheduler.schedule(work, delay, state));\n  }\n}\nfunction fixObservable(obs) {\n  obs[observable] = () => obs;\n  return obs;\n}\nfunction wrapWithZone(obs, ngZone) {\n  return obs.pipe(observeOn(new ZoneScheduler(ngZone)));\n}\nfunction useInitialLoading(obsQuery) {\n  return function useInitialLoadingOperator(source) {\n    return new Observable(function useInitialLoadingSubscription(subscriber) {\n      const currentResult = obsQuery.getCurrentResult();\n      const {\n        loading,\n        errors,\n        error,\n        partial,\n        data\n      } = currentResult;\n      const {\n        partialRefetch,\n        fetchPolicy\n      } = obsQuery.options;\n      const hasError = errors || error;\n      if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only' && !loading && !hasError) {\n        subscriber.next({\n          ...currentResult,\n          loading: true,\n          networkStatus: NetworkStatus.loading\n        });\n      }\n      return source.subscribe(subscriber);\n    });\n  };\n}\nclass QueryRef {\n  obsQuery;\n  valueChanges;\n  queryId;\n  constructor(obsQuery, ngZone, options) {\n    this.obsQuery = obsQuery;\n    const wrapped = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);\n    this.valueChanges = options.useInitialLoading ? wrapped.pipe(useInitialLoading(this.obsQuery)) : wrapped;\n    this.queryId = this.obsQuery.queryId;\n  }\n  // ObservableQuery's methods\n  get options() {\n    return this.obsQuery.options;\n  }\n  get variables() {\n    return this.obsQuery.variables;\n  }\n  result() {\n    return this.obsQuery.result();\n  }\n  getCurrentResult() {\n    return this.obsQuery.getCurrentResult();\n  }\n  getLastResult() {\n    return this.obsQuery.getLastResult();\n  }\n  getLastError() {\n    return this.obsQuery.getLastError();\n  }\n  resetLastResults() {\n    return this.obsQuery.resetLastResults();\n  }\n  refetch(variables) {\n    return this.obsQuery.refetch(variables);\n  }\n  fetchMore(fetchMoreOptions) {\n    return this.obsQuery.fetchMore(fetchMoreOptions);\n  }\n  subscribeToMore(options) {\n    return this.obsQuery.subscribeToMore(options);\n  }\n  updateQuery(mapFn) {\n    return this.obsQuery.updateQuery(mapFn);\n  }\n  stopPolling() {\n    return this.obsQuery.stopPolling();\n  }\n  startPolling(pollInterval) {\n    return this.obsQuery.startPolling(pollInterval);\n  }\n  setOptions(opts) {\n    return this.obsQuery.setOptions(opts);\n  }\n  setVariables(variables) {\n    return this.obsQuery.setVariables(variables);\n  }\n}\nconst APOLLO_FLAGS = new InjectionToken('APOLLO_FLAGS');\nconst APOLLO_OPTIONS = new InjectionToken('APOLLO_OPTIONS');\nconst APOLLO_NAMED_OPTIONS = new InjectionToken('APOLLO_NAMED_OPTIONS');\nclass ApolloBase {\n  ngZone;\n  flags;\n  _client;\n  useInitialLoading;\n  useMutationLoading;\n  constructor(ngZone, flags, _client) {\n    this.ngZone = ngZone;\n    this.flags = flags;\n    this._client = _client;\n    this.useInitialLoading = flags?.useInitialLoading ?? false;\n    this.useMutationLoading = flags?.useMutationLoading ?? false;\n  }\n  watchQuery(options) {\n    return new QueryRef(this.ensureClient().watchQuery({\n      ...options\n    }), this.ngZone, {\n      useInitialLoading: this.useInitialLoading,\n      ...options\n    });\n  }\n  query(options) {\n    return fromPromise(() => this.ensureClient().query({\n      ...options\n    }));\n  }\n  mutate(options) {\n    return useMutationLoading(fromPromise(() => this.ensureClient().mutate({\n      ...options\n    })), options.useMutationLoading ?? this.useMutationLoading);\n  }\n  watchFragment(options, extra) {\n    const obs = from(fixObservable(this.ensureClient().watchFragment({\n      ...options\n    })));\n    return extra && extra.useZone !== true ? obs : wrapWithZone(obs, this.ngZone);\n  }\n  subscribe(options, extra) {\n    const obs = from(fixObservable(this.ensureClient().subscribe({\n      ...options\n    })));\n    return extra && extra.useZone !== true ? obs : wrapWithZone(obs, this.ngZone);\n  }\n  /**\n   * Get an instance of ApolloClient\n   */\n  get client() {\n    return this.ensureClient();\n  }\n  /**\n   * Set a new instance of ApolloClient\n   * Remember to clean up the store before setting a new client.\n   *\n   * @param client ApolloClient instance\n   */\n  set client(client) {\n    if (this._client) {\n      throw new Error('Client has been already defined');\n    }\n    this._client = client;\n  }\n  ensureClient() {\n    this.checkInstance();\n    return this._client;\n  }\n  checkInstance() {\n    if (this._client) {\n      return true;\n    } else {\n      throw new Error('Client has not been defined yet');\n    }\n  }\n}\nclass Apollo extends ApolloBase {\n  map = new Map();\n  constructor(ngZone, apolloOptions, apolloNamedOptions, flags) {\n    super(ngZone, flags);\n    if (apolloOptions) {\n      this.createDefault(apolloOptions);\n    }\n    if (apolloNamedOptions && typeof apolloNamedOptions === 'object') {\n      for (let name in apolloNamedOptions) {\n        if (apolloNamedOptions.hasOwnProperty(name)) {\n          const options = apolloNamedOptions[name];\n          this.create(options, name);\n        }\n      }\n    }\n  }\n  /**\n   * Create an instance of ApolloClient\n   * @param options Options required to create ApolloClient\n   * @param name client's name\n   */\n  create(options, name) {\n    if (isNamed(name)) {\n      this.createNamed(name, options);\n    } else {\n      this.createDefault(options);\n    }\n  }\n  /**\n   * Use a default ApolloClient\n   */\n  default() {\n    return this;\n  }\n  /**\n   * Use a named ApolloClient\n   * @param name client's name\n   */\n  use(name) {\n    if (isNamed(name)) {\n      return this.map.get(name);\n    } else {\n      return this.default();\n    }\n  }\n  /**\n   * Create a default ApolloClient, same as `apollo.create(options)`\n   * @param options ApolloClient's options\n   */\n  createDefault(options) {\n    if (this._client) {\n      throw new Error('Apollo has been already created.');\n    }\n    this.client = this.ngZone.runOutsideAngular(() => new ApolloClient(options));\n  }\n  /**\n   * Create a named ApolloClient, same as `apollo.create(options, name)`\n   * @param name client's name\n   * @param options ApolloClient's options\n   */\n  createNamed(name, options) {\n    if (this.map.has(name)) {\n      throw new Error(`Client ${name} has been already created`);\n    }\n    this.map.set(name, new ApolloBase(this.ngZone, this.flags, this.ngZone.runOutsideAngular(() => new ApolloClient(options))));\n  }\n  /**\n   * Remember to clean up the store before removing a client\n   * @param name client's name\n   */\n  removeClient(name) {\n    if (isNamed(name)) {\n      this.map.delete(name);\n    } else {\n      this._client = undefined;\n    }\n  }\n  static ɵfac = function Apollo_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Apollo)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(APOLLO_OPTIONS, 8), i0.ɵɵinject(APOLLO_NAMED_OPTIONS, 8), i0.ɵɵinject(APOLLO_FLAGS, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Apollo,\n    factory: Apollo.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Apollo, [{\n    type: Injectable\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [APOLLO_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [APOLLO_NAMED_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [APOLLO_FLAGS]\n    }, {\n      type: Optional\n    }]\n  }], null);\n})();\nfunction isNamed(name) {\n  return !!name && name !== 'default';\n}\nfunction provideApollo(optionsFactory, flags = {}) {\n  return [Apollo, {\n    provide: APOLLO_OPTIONS,\n    useFactory: optionsFactory\n  }, {\n    provide: APOLLO_FLAGS,\n    useValue: flags\n  }];\n}\nfunction provideNamedApollo(optionsFactory, flags = {}) {\n  return [Apollo, {\n    provide: APOLLO_NAMED_OPTIONS,\n    useFactory: optionsFactory\n  }, {\n    provide: APOLLO_FLAGS,\n    useValue: flags\n  }];\n}\nclass Query {\n  apollo;\n  client = 'default';\n  constructor(apollo) {\n    this.apollo = apollo;\n  }\n  watch(variables, options) {\n    return this.apollo.use(this.client).watchQuery({\n      ...options,\n      variables,\n      query: this.document\n    });\n  }\n  fetch(variables, options) {\n    return this.apollo.use(this.client).query({\n      ...options,\n      variables,\n      query: this.document\n    });\n  }\n  static ɵfac = function Query_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Query)(i0.ɵɵinject(Apollo));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Query,\n    factory: Query.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Query, [{\n    type: Injectable\n  }], () => [{\n    type: Apollo\n  }], null);\n})();\nclass Mutation {\n  apollo;\n  client = 'default';\n  constructor(apollo) {\n    this.apollo = apollo;\n  }\n  mutate(variables, options) {\n    return this.apollo.use(this.client).mutate({\n      ...options,\n      variables,\n      mutation: this.document\n    });\n  }\n  static ɵfac = function Mutation_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Mutation)(i0.ɵɵinject(Apollo));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Mutation,\n    factory: Mutation.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Mutation, [{\n    type: Injectable\n  }], () => [{\n    type: Apollo\n  }], null);\n})();\nclass Subscription {\n  apollo;\n  client = 'default';\n  constructor(apollo) {\n    this.apollo = apollo;\n  }\n  subscribe(variables, options, extra) {\n    return this.apollo.use(this.client).subscribe({\n      ...options,\n      variables,\n      query: this.document\n    }, extra);\n  }\n  static ɵfac = function Subscription_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Subscription)(i0.ɵɵinject(Apollo));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Subscription,\n    factory: Subscription.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Subscription, [{\n    type: Injectable\n  }], () => [{\n    type: Apollo\n  }], null);\n})();\nconst typedGQLTag = gql$1;\nconst gql = typedGQLTag;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APOLLO_FLAGS, APOLLO_NAMED_OPTIONS, APOLLO_OPTIONS, Apollo, ApolloBase, Mutation, Query, QueryRef, Subscription, gql, provideApollo, provideNamedApollo };\n"],
  "mappings": "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",
  "names": ["gql"]
}
