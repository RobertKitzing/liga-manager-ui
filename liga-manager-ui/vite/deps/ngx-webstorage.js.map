{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-webstorage/fesm2022/ngx-webstorage.mjs"],
  "sourcesContent": ["import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, PLATFORM_ID, Inject, Optional, inject, makeEnvironmentProviders, provideAppInitializer } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nvar StorageStrategies;\n(function (StorageStrategies) {\n  StorageStrategies[\"Local\"] = \"local_strategy\";\n  StorageStrategies[\"Session\"] = \"session_strategy\";\n  StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\nclass CompatHelper {\n  static isStorageAvailable(storage) {\n    let available = true;\n    try {\n      if (typeof storage === 'object') {\n        storage.setItem('test-storage', 'foobar');\n        storage.removeItem('test-storage');\n      } else available = false;\n    } catch (e) {\n      available = false;\n    }\n    return available;\n  }\n}\nfunction noop() {}\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\nclass StorageKeyManager {\n  static {\n    this.prefix = DefaultPrefix;\n  }\n  static {\n    this.separator = DefaultSeparator;\n  }\n  static {\n    this.isCaseSensitive = DefaultIsCaseSensitive;\n  }\n  static normalize(raw) {\n    raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n    return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n  }\n  static isNormalizedKey(key) {\n    return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n  }\n  static setPrefix(prefix) {\n    StorageKeyManager.prefix = prefix;\n  }\n  static setSeparator(separator) {\n    StorageKeyManager.separator = separator;\n  }\n  static setCaseSensitive(enable) {\n    StorageKeyManager.isCaseSensitive = enable;\n  }\n  static consumeConfiguration(config) {\n    if ('prefix' in config) this.setPrefix(config.prefix);\n    if ('separator' in config) this.setSeparator(config.separator);\n    if ('caseSensitive' in config) this.setCaseSensitive(config.caseSensitive);\n  }\n}\nclass SyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n  retrieve(key) {\n    let value;\n    this.strategy.get(StorageKeyManager.normalize(key)).subscribe(result => value = typeof result === 'undefined' ? null : result);\n    return value;\n  }\n  store(key, value) {\n    this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n    return value;\n  }\n  clear(key) {\n    if (key !== undefined) this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);else this.strategy.clear().subscribe(noop);\n  }\n  getStrategyName() {\n    return this.strategy.name;\n  }\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n}\nclass AsyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n  retrieve(key) {\n    return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map(value => typeof value === 'undefined' ? null : value));\n  }\n  store(key, value) {\n    return this.strategy.set(StorageKeyManager.normalize(key), value);\n  }\n  clear(key) {\n    return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n  }\n  getStrategyName() {\n    return this.strategy.name;\n  }\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n  }\n}\nclass StrategyCacheService {\n  constructor() {\n    this.caches = {};\n  }\n  get(strategyName, key) {\n    return this.getCacheStore(strategyName)[key];\n  }\n  set(strategyName, key, value) {\n    this.getCacheStore(strategyName)[key] = value;\n  }\n  del(strategyName, key) {\n    delete this.getCacheStore(strategyName)[key];\n  }\n  clear(strategyName) {\n    this.caches[strategyName] = {};\n  }\n  getCacheStore(strategyName) {\n    if (strategyName in this.caches) return this.caches[strategyName];\n    return this.caches[strategyName] = {};\n  }\n  static {\n    this.ɵfac = function StrategyCacheService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StrategyCacheService)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: StrategyCacheService,\n      factory: StrategyCacheService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StrategyCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\nfunction getLocalStorage() {\n  return typeof window !== 'undefined' ? window.localStorage : null;\n}\nconst LocalStorageProvider = {\n  provide: LOCAL_STORAGE,\n  useFactory: getLocalStorage\n};\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\nfunction getSessionStorage() {\n  return typeof window !== 'undefined' ? window.sessionStorage : null;\n}\nconst SessionStorageProvider = {\n  provide: SESSION_STORAGE,\n  useFactory: getSessionStorage\n};\nclass BaseSyncStorageStrategy {\n  constructor(storage, cache) {\n    this.storage = storage;\n    this.cache = cache;\n    this.keyChanges = new Subject();\n  }\n  get isAvailable() {\n    if (this._isAvailable === undefined) this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n    return this._isAvailable;\n  }\n  get(key) {\n    let data = this.cache.get(this.name, key);\n    if (data !== undefined) return of(data);\n    try {\n      const item = this.storage.getItem(key);\n      if (item !== null) {\n        data = JSON.parse(item);\n        this.cache.set(this.name, key, data);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    return of(data);\n  }\n  set(key, value) {\n    const data = JSON.stringify(value);\n    this.storage.setItem(key, data);\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    this.storage.removeItem(key);\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.storage.clear();\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n}\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n  static {\n    this.strategyName = StorageStrategies.Local;\n  }\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = LocalStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n  static {\n    this.ɵfac = function LocalStorageStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LocalStorageStrategy)(i0.ɵɵinject(LOCAL_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: LocalStorageStrategy,\n      factory: LocalStorageStrategy.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalStorageStrategy, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LOCAL_STORAGE]\n    }]\n  }, {\n    type: StrategyCacheService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }], null);\n})();\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n  static {\n    this.strategyName = StorageStrategies.Session;\n  }\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = SessionStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (event.key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n  static {\n    this.ɵfac = function SessionStorageStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SessionStorageStrategy)(i0.ɵɵinject(SESSION_STORAGE), i0.ɵɵinject(StrategyCacheService), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SessionStorageStrategy,\n      factory: SessionStorageStrategy.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SessionStorageStrategy, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [SESSION_STORAGE]\n    }]\n  }, {\n    type: StrategyCacheService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }], null);\n})();\nclass InMemoryStorageStrategy {\n  static {\n    this.strategyName = StorageStrategies.InMemory;\n  }\n  constructor(cache) {\n    this.cache = cache;\n    this.keyChanges = new Subject();\n    this.isAvailable = true;\n    this.name = InMemoryStorageStrategy.strategyName;\n  }\n  get(key) {\n    return of(this.cache.get(this.name, key));\n  }\n  set(key, value) {\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n  static {\n    this.ɵfac = function InMemoryStorageStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InMemoryStorageStrategy)(i0.ɵɵinject(StrategyCacheService));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: InMemoryStorageStrategy,\n      factory: InMemoryStorageStrategy.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InMemoryStorageStrategy, [{\n    type: Injectable\n  }], () => [{\n    type: StrategyCacheService,\n    decorators: [{\n      type: Inject,\n      args: [StrategyCacheService]\n    }]\n  }], null);\n})();\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [{\n  provide: STORAGE_STRATEGIES,\n  useClass: InMemoryStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: LocalStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: SessionStorageStrategy,\n  multi: true\n}];\nconst [InMemoryStorageStrategyProvider, LocalStorageStrategyProvider, SessionStorageStrategyProvider] = Strategies;\nconst StorageStrategyStubName = 'stub_strategy';\nclass StorageStrategyStub {\n  constructor(name) {\n    this.keyChanges = new Subject();\n    this.store = {};\n    this._available = true;\n    this.name = name || StorageStrategyStubName;\n  }\n  get isAvailable() {\n    return this._available;\n  }\n  get(key) {\n    return of(this.store[key]);\n  }\n  set(key, value) {\n    this.store[key] = value;\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    delete this.store[key];\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.store = {};\n    this.keyChanges.next(null);\n    return of(null);\n  }\n}\nclass StorageStub {\n  constructor() {\n    this.store = {};\n  }\n  get length() {\n    return Object.keys(this.store).length;\n  }\n  clear() {\n    this.store = {};\n  }\n  getItem(key) {\n    return this.store[key] || null;\n  }\n  key(index) {\n    return Object.keys(this.store)[index];\n  }\n  removeItem(key) {\n    delete this.store[key];\n  }\n  setItem(key, value) {\n    this.store[key] = value;\n  }\n}\nconst InvalidStrategyError = 'invalid_strategy';\nclass StrategyIndex {\n  static {\n    this.index = {};\n  }\n  constructor(strategies) {\n    this.strategies = strategies;\n    this.registration$ = new Subject();\n    if (!strategies) strategies = [];\n    this.strategies = strategies.reverse().map((strategy, index, arr) => strategy.name).map((name, index, arr) => arr.indexOf(name) === index ? index : null).filter(index => index !== null).map(index => strategies[index]);\n  }\n  static get(name) {\n    if (!this.isStrategyRegistered(name)) throw Error(InvalidStrategyError);\n    let strategy = this.index[name];\n    if (!strategy.isAvailable) {\n      strategy = this.index[StorageStrategies.InMemory];\n    }\n    return strategy;\n  }\n  static set(name, strategy) {\n    this.index[name] = strategy;\n  }\n  static clear(name) {\n    if (name !== undefined) delete this.index[name];else this.index = {};\n  }\n  static isStrategyRegistered(name) {\n    return name in this.index;\n  }\n  static hasRegistredStrategies() {\n    return Object.keys(this.index).length > 0;\n  }\n  getStrategy(name) {\n    return StrategyIndex.get(name);\n  }\n  indexStrategies() {\n    this.strategies.forEach(strategy => this.register(strategy.name, strategy));\n  }\n  indexStrategy(name, overrideIfExists = false) {\n    if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists) return StrategyIndex.get(name);\n    const strategy = this.strategies.find(strategy => strategy.name === name);\n    if (!strategy) throw new Error(InvalidStrategyError);\n    this.register(name, strategy, overrideIfExists);\n    return strategy;\n  }\n  register(name, strategy, overrideIfExists = false) {\n    if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n      StrategyIndex.set(name, strategy);\n      this.registration$.next(name);\n    }\n  }\n  static {\n    this.ɵfac = function StrategyIndex_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StrategyIndex)(i0.ɵɵinject(STORAGE_STRATEGIES, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: StrategyIndex,\n      factory: StrategyIndex.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StrategyIndex, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [STORAGE_STRATEGIES]\n    }]\n  }], null);\n})();\nclass LocalStorageService extends SyncStorage {}\nfunction buildService$1(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Local);\n  return new SyncStorage(strategy);\n}\nconst LocalStorageServiceProvider = {\n  provide: LocalStorageService,\n  useFactory: buildService$1,\n  deps: [StrategyIndex]\n};\nclass SessionStorageService extends SyncStorage {}\nfunction buildService(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Session);\n  return new SyncStorage(strategy);\n}\nconst SessionStorageServiceProvider = {\n  provide: SessionStorageService,\n  useFactory: buildService,\n  deps: [StrategyIndex]\n};\nclass DecoratorBuilder {\n  static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n    const rawKey = key || propName;\n    let storageKey;\n    Object.defineProperty(prototype, propName, {\n      get: function () {\n        let value;\n        StrategyIndex.get(strategyName).get(getKey()).subscribe(result => value = result);\n        return value === undefined ? defaultValue : value;\n      },\n      set: function (value) {\n        StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n      }\n    });\n    function getKey() {\n      if (storageKey !== undefined) return storageKey;\n      return storageKey = StorageKeyManager.normalize(rawKey);\n    }\n  }\n}\nfunction LocalStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n  };\n}\nfunction SessionStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n  };\n}\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\nvar InternalNgxWebstorageFeatureKind;\n(function (InternalNgxWebstorageFeatureKind) {\n  InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"Config\"] = 1] = \"Config\";\n  InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"LocalStorage\"] = 2] = \"LocalStorage\";\n  InternalNgxWebstorageFeatureKind[InternalNgxWebstorageFeatureKind[\"SessionStorage\"] = 3] = \"SessionStorage\";\n})(InternalNgxWebstorageFeatureKind || (InternalNgxWebstorageFeatureKind = {}));\nfunction appInit() {\n  const config = inject(LIB_CONFIG);\n  const index = inject(StrategyIndex);\n  return () => {\n    StorageKeyManager.consumeConfiguration(config);\n    index.indexStrategies();\n  };\n}\n/**\n * Provide ngx-webstorage basic features.\n *\n * - You can customise the configuration with the `withConfiguration` feature.\n * - You can enable the `LocalStorage` features with the `withLocalStorage` feature.\n * - You can enable the `SessionStorage` features with the `withSessionStorage` feature.\n *\n * @default config { prefix: 'ngx-webstorage', separator: '|', caseSensitive: false }\n */\nfunction provideNgxWebstorage(...features) {\n  const {\n    configProvider,\n    featureProviders\n  } = parseFeatures(features);\n  return makeEnvironmentProviders([configProvider, InMemoryStorageStrategyProvider, provideAppInitializer(() => {\n    const initializerFn = appInit();\n    return initializerFn();\n  }), ...featureProviders]);\n}\nfunction parseFeatures(features) {\n  let configProvider;\n  const featureProviders = [];\n  const parsedFeatures = new Set();\n  for (const feature of features) {\n    if (parsedFeatures.has(feature.kind)) throw new Error(`Feature ${feature.kind} is already provided.`);\n    if (feature.kind === InternalNgxWebstorageFeatureKind.Config) {\n      configProvider = feature.providers[0];\n    } else featureProviders.push(...feature.providers);\n    parsedFeatures.add(feature.kind);\n  }\n  return {\n    configProvider: configProvider ?? {\n      provide: LIB_CONFIG,\n      useValue: {\n        prefix: DefaultPrefix,\n        separator: DefaultSeparator,\n        caseSensitive: DefaultIsCaseSensitive\n      }\n    },\n    featureProviders\n  };\n}\nfunction makeNgxWebstorageFeature(kind, providers) {\n  return {\n    kind,\n    providers\n  };\n}\nfunction withNgxWebstorageConfig(config) {\n  return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.Config, [{\n    provide: LIB_CONFIG,\n    useValue: config\n  }]);\n}\n/** Provides everything necessary to use the `LocalStorage` features. */\nfunction withLocalStorage() {\n  return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.LocalStorage, [LocalStorageProvider, LocalStorageServiceProvider, LocalStorageStrategyProvider]);\n}\nfunction withSessionStorage() {\n  return makeNgxWebstorageFeature(InternalNgxWebstorageFeatureKind.SessionStorage, [SessionStorageProvider, SessionStorageServiceProvider, SessionStorageStrategyProvider]);\n}\n\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InternalNgxWebstorageFeatureKind, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, makeNgxWebstorageFeature, provideNgxWebstorage, withLocalStorage, withNgxWebstorageConfig, withSessionStorage };\n"],
  "mappings": "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",
  "names": ["StorageStrategies", "strategy", "InternalNgxWebstorageFeatureKind"]
}
