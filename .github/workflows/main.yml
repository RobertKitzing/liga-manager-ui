name: Main Pipeline
on:
  push:
    branches:
      - main

env:
  DOCKER_REPO_UI: robertkitzing/liga-manager-ui
  DOCKER_REPO_IMGPROXY: robertkitzing/liga-manager-imgproxy
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  npm-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - uses: actions/cache/restore@v4
        id: cache_restore
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - run: npm ci
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
  lint:
    runs-on: ubuntu-latest
    needs: 
      - npm-install
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - run: npx nx-cloud record -- nx run-many --target lint
  build:
    runs-on: ubuntu-latest
    needs: 
      - npm-install
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - run: npx nx-cloud record -- nx run-many --target=build
      - name: Build
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          load: true
          tags: ${{ env.DOCKER_REPO_UI }}:e2e
      - name: Save docker image
        run: docker save ${{ env.DOCKER_REPO_UI }}:e2e | gzip > /tmp/lima.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lima-img
          path: /tmp/lima.tar
  test:
    runs-on: ubuntu-latest
    needs: 
      - npm-install
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - run: npx nx-cloud record -- nx run-many --target test
      - name: Archive Code Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage/**/coverage-summary.json
          if-no-files-found: error
      - name: Code Coverage on Main
        uses: dkhunt27/nx-code-coverage@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          no-coverage-ran: false
          coverage-folder: ./coverage
          coverage-base-folder: ./coverage-base
          gist-processing: false
          named-logo: jest
          color: green
          hide-coverage-reports: false
          hide-unchanged: false
  e2e:
    runs-on: ubuntu-latest
    needs: 
      - test
      - lint
      - build
    strategy:
      fail-fast: false
      matrix:
        containers: [0, 1, 2, 3, 4 ,5]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Download artifact
        uses: actions/download-artifact@v4.3.0
        with:
          name: lima-img
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/lima.tar
      - name: Start Services
        uses: hoverkraft-tech/compose-action@v2.2.0
        env:
          UI_IMAGE: ${{ env.DOCKER_REPO_UI }}
          UI_TAG: 'e2e'
          API_TAG: 'latest'
        with:
          compose-file: "./docker-compose.e2e.yml"
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          command: npx nx-cloud record -- nx e2e liga-manager-ui-web --config="baseUrl=http://localhost" --browser="chrome" --record --env.CYPRESS_RECORD_KEY="${{ secrets.CYPRESS_RECORD_KEY }}" --args="--parallel" --group chrome
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-videos
          path: dist/cypress/apps/liga-manager-ui-web
  nx-release:
    runs-on: ubuntu-latest
    needs:
      - e2e
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - uses: fregante/setup-git-user@v2
      - name: Create Release
        run:
          npx nx release --skip-publish
      - run: git push --follow-tags
  build-imgproxy:
    runs-on: ubuntu-latest
    needs:
      - e2e
      - nx-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - run: npx nx-cloud record -- nx run liga-manager-ui-web:build:production
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          load: true
          file: Dockerfile.imgproxy
          push: true
          tags: ${{ env.DOCKER_REPO_IMGPROXY }}:latest,${{ env.DOCKER_REPO_IMGPROXY }}:${{ steps.package-version.outputs.current-version}}
  publish-docker-image:
    runs-on: ubuntu-latest
    needs:
      - e2e
      - nx-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4.3.0
        with:
          name: lima-img
          path: /tmp
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Load image
        run: |
          docker load --input /tmp/lima.tar
      - name: Tag/push image with Version
        run: |
          docker tag ${{ env.DOCKER_REPO_UI }}:e2e ${{ env.DOCKER_REPO_UI }}:${{ steps.package-version.outputs.current-version }}
          docker push ${{ env.DOCKER_REPO_UI }}:${{ steps.package-version.outputs.current-version}}
      - name: Tag image with latest
        run: |
          docker tag ${{ env.DOCKER_REPO_UI }}:e2e ${{ env.DOCKER_REPO_UI }}:latest
          docker push ${{ env.DOCKER_REPO_UI }}:latest
  build-app:
    runs-on: ubuntu-latest
    needs:
      - e2e
      - nx-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - uses: nrwl/nx-set-shas@v4
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "21"
      - run: npx nx-cloud record -- nx run liga-manager-ui-web:build:production
      - run: npx nx-cloud record -- nx run liga-manager-ui:copy:app-settings:prod
      - run: npx nx-cloud record -- nx run liga-manager-ui-web:sync:android
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: npm install Capacitor
        working-directory: apps/liga-manager-ui-web
        run: npm ci
      - name: Set Capacitor Version
        run: npx capacitor-set-version set:android -v ${{ steps.package-version.outputs.current-version }} -b ${{ github.run_number  }}
        working-directory: apps/liga-manager-ui-web
      - name: Extract Android signing key from env
        working-directory: apps/liga-manager-ui-web
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > ./release.jks
      - uses: actions/cache@v4
        with:
          path: apps/liga-manager-ui-web/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - run: sudo apt install apksigner
      - name: Build App Apk
        working-directory: apps/liga-manager-ui-web
        run: npx cap build android --keystorepass ${{ secrets.RELEASE_KEYSTORE_PASSWORD }} --keystorealiaspass ${{ secrets.RELEASE_KEYSTORE_PASSWORD }} --androidreleasetype APK
      - name: Upload artifact APK
        uses: actions/upload-artifact@v4
        with:
          name: lima-app-release-signed
          path: apps/liga-manager-ui-web/android/app/build/outputs/apk/release/app-release-signed.apk
  github-create-release:
    runs-on: ubuntu-latest
    needs:
      - build-app
      - publish-docker-image
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4.3.0
        with:
          name: lima-app-release-signed
          path: /tmp
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: Create Release
        id: android_app_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.package-version.outputs.current-version }}
          release_name: Release ${{ steps.package-version.outputs.current-version }}
          draft: false
          prerelease: false
          body: |
            - New Docker Image @ ${{ env.DOCKER_REPO_UI }}:${{ steps.package-version.outputs.current-version}}
      - name: Upload Release Asset
        id: upload-release-asset-apk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.android_app_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /tmp/app-release-signed.apk
          asset_name: app-release-signed.apk
          asset_content_type: application/x-authorware-bin