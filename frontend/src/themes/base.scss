:root {

    @each $value,
    $color in $palette {
        @if $value !='contrast' {
            --theme-primary-#{$value}: #{map.get($palette, $value)};
            --theme-primary-contrast-#{$value}: #{map.get(map.get($palette, contrast), $value)};
        }
    }
}

$liga-manager-ui-primary: mat.define-palette($palette);
$liga-manager-ui-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$liga-manager-ui-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$liga-manager-ui-light-theme: mat.define-light-theme((color: (primary: $liga-manager-ui-primary,
                accent: $liga-manager-ui-accent,
                warn: $liga-manager-ui-warn,
            )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($liga-manager-ui-light-theme);

$liga-manager-ui-dark-theme: mat.define-dark-theme((color: (primary: $liga-manager-ui-primary,
                accent: $liga-manager-ui-accent,
                warn: $liga-manager-ui-warn,
            )));

.dark {
    @include mat.all-component-colors($liga-manager-ui-dark-theme);
}