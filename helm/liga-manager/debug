NAME: liga-manger
LAST DEPLOYED: Tue Aug  5 16:27:18 2025
NAMESPACE: liga-manager
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
liga-manager-api:
  affinity: {}
  autoscaling:
    enabled: false
  enabled: true
  env:
    LOG_LEVEL: warning
    MYSQL_DATABASE: dev
    MYSQL_HOST: liga-manger-mariadb
    MYSQL_PASSWORD: dev
    MYSQL_ROOT_PASSWORD: dev
    MYSQL_USER: root
    REDIS_HOST: liga-manger-redis-master
  fullnameOverride: ""
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mklocke/liga-manager-api
  imagePullSecrets: []
  livenessProbe: {}
  nameOverride: ""
  nodeSelector: {}
  persistence:
    teamlogos:
      storage: 1Gi
      storageClassName: ""
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  readinessProbe: {}
  replicaCount: 1
  resources: {}
  secrets: {}
  securityContext: {}
  service:
    port: 9000
    type: ClusterIP
  tolerations: {}
  volumeMounts: []
  volumes: []
liga-manager-imgproxy:
  enabled: true
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: robertkitzing/liga-manager-imgproxy
  imagePullSecrets: []
  replicaCount: 1
  service:
    port: 8080
    type: ClusterIP
liga-manager-ui:
  enabled: true
  env:
    API_HOST: liga-manger-liga-manager-api:9000
    GOOGLE_MAPS_API_KEY: ""
    IMG_PROXY_HOST: liga-manger-liga-manager-imgproxy:8080
    USE_IMGPROXY: "true"
  fullnameOverride: ""
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: robertkitzing/liga-manager-ui
  imagePullSecrets: []
  ingress:
    annotations:
      cert-manager.io/issuer: step-issuer
      cert-manager.io/issuer-group: certmanager.step.sm
      cert-manager.io/issuer-kind: StepClusterIssuer
    className: nginx
    enabled: true
    hosts:
    - host: liga-manager-ui.cluster.home
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls:
    - hosts:
      - liga-manager-ui.cluster.home
      secretName: liga-manager-ui-tls
  nameOverride: ""
  replicaCount: 1
  service:
    port: 80
    type: ClusterIP
mariadb:
  architecture: standalone
  auth:
    customPasswordFiles: {}
    database: dev
    existingSecret: ""
    forcePassword: false
    password: dev
    replicationPassword: ""
    replicationUser: replicator
    rootPassword: dev
    usePasswordFiles: true
    user: dev
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      compatibility:
        openshift:
          adaptSecurityContext: auto
      defaultStorageClass: ""
      imagePullSecrets: []
      imageRegistry: ""
      security:
        allowInsecureImages: false
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraDeploy: []
  fullnameOverride: ""
  global:
    compatibility:
      openshift:
        adaptSecurityContext: auto
    defaultStorageClass: ""
    imagePullSecrets: []
    imageRegistry: ""
    security:
      allowInsecureImages: false
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mariadb
    tag: 11.8.2-debian-12-r3
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  kubeVersion: ""
  metrics:
    annotations:
      prometheus.io/port: "9104"
      prometheus.io/scrape: "true"
    containerPorts:
      http: 9104
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: false
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    extraVolumeMounts:
      primary: []
      secondary: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.17.2-debian-12-r13
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    resourcesPreset: nano
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  passwordUpdateJob:
    annotations: {}
    args: []
    automountServiceAccountToken: false
    backoffLimit: 10
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraCommands: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    previousPasswords:
      existingSecret: ""
      password: ""
      replicationPassword: ""
      rootPassword: ""
    resources: {}
    resourcesPreset: micro
  primary:
    affinity: {}
    args: []
    automountServiceAccountToken: false
    command: []
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      datadir=/bitnami/mariadb/data
      plugin_dir=/opt/bitnami/mariadb/plugin
      port={{ .Values.primary.containerPorts.mysql }}
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      long_query_time=10.0
      binlog_expire_logs_seconds=2592000
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mariadb/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mariadb/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mariadb.tlsCACert" .) }}
      ssl_ca={{ include "mariadb.tlsCACert" . }}
      {{- end }}
      {{- end }}
      {{- if .Values.tde.enabled }}
      plugin_load_add=file_key_management
      file_key_management_filename=/opt/bitnami/mariadb/tde/{{ .Values.tde.encryptedKeyFilename }}
      file_key_management_filekey=FILE:/opt/bitnami/mariadb/tde/{{ .Values.tde.randomKeyFilename }}
      file_key_management_encryption_algorithm={{ .Values.tde.fileKeyManagementEncryptionAlgorithm }}
      innodb_encrypt_tables={{ .Values.tde.innodbEncryptTables }}
      innodb_encrypt_log={{ .Values.tde.innodbEncryptLog }}
      innodb_encrypt_temporary_tables={{ .Values.tde.innodbEncryptTemporaryTables }}
      innodb_encryption_threads={{ .Values.tde.innodbEncryptionThreads }}
      encrypt_tmp_disk_tables={{ .Values.tde.encryptTmpDiskTables }}
      encrypt_tmp_files={{ .Values.tde.encryptTmpTiles }}
      encrypt_binlog={{ .Values.tde.encryptBINLOG }}
      aria_encrypt_tables={{ .Values.tde.ariaEncryptTables }}
      {{- end }}

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mariadb/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    containerPorts:
      mysql: 3306
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: primary
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      labels: {}
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    resourcesPreset: small
    revisionHistoryLimit: 10
    rollingUpdatePartition: ""
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        metrics: 9104
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 120
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    startupWaitOptions: {}
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  rbac:
    create: false
  runtimeClassName: ""
  schedulerName: ""
  secondary:
    affinity: {}
    args: []
    automountServiceAccountToken: false
    command: []
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      datadir=/bitnami/mariadb/data
      port={{ .Values.secondary.containerPorts.mysql }}
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      long_query_time=10.0
      binlog_expire_logs_seconds=2592000
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mariadb/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mariadb/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mariadb.tlsCACert" .) }}
      ssl_ca={{ include "mariadb.tlsCACert" . }}
      {{- end }}
      {{- end }}

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    containerPorts:
      mysql: 3306
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: secondary
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      labels: {}
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources: {}
    resourcesPreset: small
    revisionHistoryLimit: 10
    rollingUpdatePartition: ""
    runtimeClassName: ""
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        metrics: 9104
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 120
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    startupWaitOptions: {}
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    name: ""
  serviceBindings:
    enabled: false
  tde:
    ariaEncryptTables: "ON"
    enabled: false
    encryptBINLOG: "ON"
    encryptTmpDiskTables: "ON"
    encryptTmpTiles: "ON"
    encryptedKeyFilename: keyfile.enc
    existingSecret: ""
    fileKeyManagementEncryptionAlgorithm: AES_CTR
    innodbEncryptLog: "ON"
    innodbEncryptTables: FORCE
    innodbEncryptTemporaryTables: "ON"
    innodbEncryptionThreads: 4
    randomKeyFilename: keyfile.key
    secretsStoreProvider:
      enabled: false
      provider: vault
      vault:
        address: ""
        authMountPath: ""
        encryptedKeySecretKey: ""
        encryptedKeySecretPath: ""
        randomKeySecretKey: ""
        randomKeySecretPath: ""
        roleName: ""
  tls:
    autoGenerated:
      certManager:
        duration: 2160h
        existingIssuer: ""
        existingIssuerKind: ""
        keyAlgorithm: RSA
        keySize: 2048
        renewBefore: 360h
      enabled: true
      engine: helm
    ca: ""
    cert: ""
    certCAFilename: ""
    certFilename: tls.crt
    certKeyFilename: tls.key
    enabled: false
    existingSecret: ""
    key: ""
  volumePermissions:
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r48
    resources: {}
    resourcesPreset: nano
redis:
  architecture: standalone
  auth:
    acl:
      enabled: false
      sentinel: false
      userSecret: ""
      users: []
    enabled: false
    existingSecret: ""
    existingSecretPasswordKey: ""
    password: ""
    sentinel: true
    usePasswordFileFromSecret: true
    usePasswordFiles: true
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      compatibility:
        openshift:
          adaptSecurityContext: auto
      defaultStorageClass: ""
      imagePullSecrets: []
      imageRegistry: ""
      redis:
        password: ""
      security:
        allowInsecureImages: false
      storageClass: ""
  commonAnnotations: {}
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  configmapChecksumAnnotations: true
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfigmap: ""
  extraDeploy: []
  fullnameOverride: ""
  global:
    compatibility:
      openshift:
        adaptSecurityContext: auto
    defaultStorageClass: ""
    imagePullSecrets: []
    imageRegistry: ""
    redis:
      password: ""
    security:
      allowInsecureImages: false
    storageClass: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 8.0.3-debian-12-r1
  kubeVersion: ""
  kubectl:
    command:
    - /opt/bitnami/scripts/kubectl-scripts/update-master-label.sh
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.33.3-debian-12-r0
    resources:
      limits: {}
      requests: {}
  master:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    count: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    enableServiceLinks: true
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    minReadySeconds: 0
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
      subPathExpr: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    resourcesPreset: nano
    revisionHistoryLimit: 10
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      portNames:
        redis: tcp-redis
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  metrics:
    command: []
    containerPorts:
      http: 9121
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraArgs: {}
    extraEnvVars: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.74.0-debian-12-r2
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    podMonitor:
      additionalEndpoints: []
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      podTargetLabels: []
      port: metrics
      relabelings: []
      relabellings: []
      sampleLimit: false
      scrapeTimeout: ""
      targetLimit: false
      tlsConfig: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    redisTargetHost: localhost
    resources: {}
    resourcesPreset: nano
    service:
      annotations: {}
      clusterIP: ""
      enabled: true
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      ports:
        http: 9121
      type: ClusterIP
    serviceMonitor:
      additionalEndpoints: []
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      podTargetLabels: []
      port: http-metrics
      relabelings: []
      relabellings: []
      sampleLimit: false
      scrapeTimeout: ""
      targetLimit: false
      tlsConfig: {}
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
  nameOverride: ""
  nameResolutionThreshold: 5
  nameResolutionTimeout: 5
  namespaceOverride: ""
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
    metrics:
      allowExternal: true
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
  pdb: {}
  persistence:
    enabled: false
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    enableServiceLinks: true
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    minReadySeconds: 0
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
      subPathExpr: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 3
    resources: {}
    resourcesPreset: nano
    revisionHistoryLimit: 10
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      name: ""
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  secretAnnotations: {}
  secretChecksumAnnotations: true
  sentinel:
    annotations: {}
    args: []
    automateClusterRecovery: false
    command: []
    configuration: ""
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enableServiceLinks: true
    enabled: false
    externalAccess:
      enabled: false
      service:
        annotations: {}
        loadBalancerClass: ""
        loadBalancerIP: []
        loadBalancerIPAnnotaion: ""
        loadBalancerSourceRanges: []
        redisPort: 6379
        sentinelPort: 26379
        type: LoadBalancer
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 180000
    getMasterTimeout: 90
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 8.0.3-debian-12-r1
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    masterService:
      annotations: {}
      clusterIP: ""
      enabled: false
      externalTrafficPolicy: ""
      extraPorts: []
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    masterSet: mymaster
    parallelSyncs: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      labels: {}
      medium: ""
      selector: {}
      size: 100Mi
      sizeLimit: ""
      storageClass: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    redisShutdownWaitFailover: true
    resources: {}
    resourcesPreset: nano
    service:
      annotations: {}
      clusterIP: ""
      createMaster: false
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
        extraPorts: []
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
        sentinel: ""
      ports:
        redis: 6379
        sentinel: 26379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    name: ""
  serviceBindings:
    enabled: false
  sysctl:
    command: []
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r48
    mountHostSys: false
    resources: {}
    resourcesPreset: nano
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ""
  useHostnames: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
      seLinuxOptions: {}
    enabled: false
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r48
    resources: {}
    resourcesPreset: nano

HOOKS:
---
# Source: liga-manager/charts/liga-manager-api/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "liga-manger-liga-manager-api-test-connection"
  labels:
    helm.sh/chart: liga-manager-api-0.0.1
    app.kubernetes.io/name: liga-manager-api
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "1.26.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['liga-manger-liga-manager-api:9000']
  restartPolicy: Never
MANIFEST:
---
# Source: liga-manager/charts/mariadb/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: liga-manger-mariadb
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: liga-manger
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/version: 11.8.2
      helm.sh/chart: mariadb-21.0.3
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 3306
        - port: 3306
---
# Source: liga-manager/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: liga-manger-redis
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: liga-manger
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: liga-manager/charts/mariadb/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: liga-manger-mariadb
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: liga-manger
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/component: primary
---
# Source: liga-manager/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: liga-manger-redis-master
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: liga-manger
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: liga-manager/charts/mariadb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: liga-manger-mariadb
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
automountServiceAccountToken: false
---
# Source: liga-manager/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: liga-manger-redis-master
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
---
# Source: liga-manager/charts/liga-manager-ui/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: liga-manger-liga-manager-ui
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-ui-0.0.1
    app.kubernetes.io/name: liga-manager-ui
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
data:
  GOOGLE_MAPS_API_KEY:
---
# Source: liga-manager/charts/mariadb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: liga-manger-mariadb
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
type: Opaque
data:
  mariadb-root-password: "ZGV2"
---
# Source: liga-manager/charts/liga-manager-api/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-liga-manager-api
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-api-0.0.1
    app.kubernetes.io/name: liga-manager-api
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "1.26.0"
    app.kubernetes.io/managed-by: Helm
data:
  LOG_LEVEL: warning
  MYSQL_DATABASE: dev
  MYSQL_HOST: liga-manger-mariadb
  MYSQL_PASSWORD: dev
  MYSQL_ROOT_PASSWORD: dev
  MYSQL_USER: root
  REDIS_HOST: liga-manger-redis-master
---
# Source: liga-manager/charts/liga-manager-imgproxy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-liga-manager-imgproxy
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-imgproxy-0.0.1
    app.kubernetes.io/name: liga-manager-imgproxy
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: liga-manager/charts/liga-manager-ui/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-liga-manager-ui-env
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-ui-0.0.1
    app.kubernetes.io/name: liga-manager-ui
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
data:
  API_HOST: liga-manger-liga-manager-api:9000
  GOOGLE_MAPS_API_KEY: ""
  IMG_PROXY_HOST: liga-manger-liga-manager-imgproxy:8080
  USE_IMGPROXY: "true"
---
# Source: liga-manager/charts/liga-manager-ui/templates/nginx-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-liga-manager-ui-nginx
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-ui-0.0.1
    app.kubernetes.io/name: liga-manager-ui
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
data:
  default.conf: |
    upstream imgproxy {
      server liga-manger-liga-manager-imgproxy:8080;
    }
    upstream api {
      server liga-manger-liga-manager-api:9000;
    }
    server {
        listen 80;
        server_name localhost;
        server_tokens off;
        gzip on;
        gzip_types application/json application/javascript image/webp image/png application/font-woff2 image/x-icon;

        include /nginx-ui-conf/nginx.ui.conf;

        location /api {
            include fastcgi_params;
            fastcgi_pass api;
            fastcgi_param DOCUMENT_ROOT /var/www/api/public;
            fastcgi_param SCRIPT_NAME index.php;
            fastcgi_param SCRIPT_FILENAME /var/www/api/public/index.php;
        }
    }
---
# Source: liga-manager/charts/mariadb/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-mariadb
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    datadir=/bitnami/mariadb/data
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    long_query_time=10.0
    binlog_expire_logs_seconds=2592000
    
    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
# Source: liga-manager/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-redis-configuration
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
  users.acl: |-
---
# Source: liga-manager/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-redis-health
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: liga-manager/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: liga-manger-redis-scripts
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/users.acl ]];then
        cp /opt/bitnami/redis/mounted-etc/users.acl /opt/bitnami/redis/etc/users.acl
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: liga-manager/charts/liga-manager-api/templates/team-logos.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: liga-manger-team-logos
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-api-0.0.1
    app.kubernetes.io/name: liga-manager-api
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "1.26.0"
    app.kubernetes.io/managed-by: Helm
spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 1Gi
    storageClassName:
---
# Source: liga-manager/charts/liga-manager-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: liga-manger-liga-manager-api
  labels:
    helm.sh/chart: liga-manager-api-0.0.1
    app.kubernetes.io/name: liga-manager-api
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "1.26.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: liga-manager-api
    app.kubernetes.io/instance: liga-manger
---
# Source: liga-manager/charts/liga-manager-imgproxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: liga-manger-liga-manager-imgproxy
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-imgproxy-0.0.1
    app.kubernetes.io/name: liga-manager-imgproxy
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: liga-manager-imgproxy
    app.kubernetes.io/instance: liga-manger
---
# Source: liga-manager/charts/liga-manager-ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: liga-manger-liga-manager-ui
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-ui-0.0.1
    app.kubernetes.io/name: liga-manager-ui
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: liga-manager-ui
    app.kubernetes.io/instance: liga-manger
---
# Source: liga-manager/charts/mariadb/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: liga-manger-mariadb-headless
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/part-of: mariadb
---
# Source: liga-manager/charts/mariadb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: liga-manger-mariadb
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/component: primary
---
# Source: liga-manager/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: liga-manger-redis-headless
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/name: redis
---
# Source: liga-manager/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: liga-manger-redis-master
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: liga-manager/charts/liga-manager-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: liga-manger-liga-manager-api
  labels:
    helm.sh/chart: liga-manager-api-0.0.1
    app.kubernetes.io/name: liga-manager-api
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "1.26.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: liga-manager-api
      app.kubernetes.io/instance: liga-manger
  template:
    metadata:
      labels:
        helm.sh/chart: liga-manager-api-0.0.1
        app.kubernetes.io/name: liga-manager-api
        app.kubernetes.io/instance: liga-manger
        app.kubernetes.io/version: "1.26.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: liga-manager-api
          image: "mklocke/liga-manager-api:1.26.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          volumeMounts:
            - mountPath: /var/www/logos
              name: team-logos
          envFrom:
            - configMapRef:
                name: liga-manger-liga-manager-api
      volumes:
        - name: team-logos
          persistentVolumeClaim:
            claimName: liga-manger-team-logos
---
# Source: liga-manager/charts/liga-manager-imgproxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: liga-manger-liga-manager-imgproxy
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-imgproxy-0.0.1
    app.kubernetes.io/name: liga-manager-imgproxy
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: liga-manager-imgproxy
      app.kubernetes.io/instance: liga-manger
  template:
    metadata:
      labels:
        helm.sh/chart: liga-manager-imgproxy-0.0.1
        app.kubernetes.io/name: liga-manager-imgproxy
        app.kubernetes.io/instance: liga-manger
        app.kubernetes.io/version: "5.4.63"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: liga-manager-imgproxy
          image: "robertkitzing/liga-manager-imgproxy:5.4.63"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: liga-manger-liga-manager-imgproxy
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: /lima/logos
              name: team-logos
      volumes:
        - name: team-logos
          persistentVolumeClaim:
            claimName: liga-manger-team-logos
---
# Source: liga-manager/charts/liga-manager-ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: liga-manger-liga-manager-ui
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-ui-0.0.1
    app.kubernetes.io/name: liga-manager-ui
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: liga-manager-ui
      app.kubernetes.io/instance: liga-manger
  template:
    metadata:
      labels:
        helm.sh/chart: liga-manager-ui-0.0.1
        app.kubernetes.io/name: liga-manager-ui
        app.kubernetes.io/instance: liga-manger
        app.kubernetes.io/version: "5.4.63"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - name: liga-manager-ui
        image: "robertkitzing/liga-manager-ui:5.4.63"
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: nginx-config
            mountPath: /etc/nginx/conf.d/
        envFrom:
          - configMapRef:
              name: liga-manger-liga-manager-ui-env
          - secretRef:
              name: liga-manger-liga-manager-ui
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
      volumes:
        - name: nginx-config
          configMap:
            name: liga-manger-liga-manager-ui-nginx
---
# Source: liga-manager/charts/mariadb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: liga-manger-mariadb
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/version: 11.8.2
    helm.sh/chart: mariadb-21.0.3
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: liga-manger
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/component: primary
  serviceName: liga-manger-mariadb-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: df419cf29b11a978cb92d9f0b83715548799338e26ba538bc631336407e85982
      labels:
        app.kubernetes.io/instance: liga-manger
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mariadb
        app.kubernetes.io/version: 11.8.2
        helm.sh/chart: mariadb-21.0.3
        app.kubernetes.io/part-of: mariadb
        app.kubernetes.io/component: primary
    spec:
      
      automountServiceAccountToken: false
      serviceAccountName: liga-manger-mariadb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: liga-manger
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mariadb:11.8.2-debian-12-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mariadb/logs; then
                cp -r /opt/bitnami/mariadb/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:11.8.2-debian-12-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD_FILE
              value: /opt/bitnami/mariadb/secrets/mariadb-root-password
            - name: MARIADB_DATABASE
              value: "dev"
            - name: MARIADB_ENABLE_SSL
              value: "no"
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mariadb-admin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mariadb-admin ping -uroot -p"${password_aux}"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
            - name: mariadb-credentials
              mountPath: /opt/bitnami/mariadb/secrets/
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/logs
              subPath: app-logs-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: liga-manger-mariadb
        - name: mariadb-credentials
          secret:
            secretName: liga-manger-mariadb
            items:
              - key: mariadb-root-password
                path: mariadb-root-password
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: liga-manger
          app.kubernetes.io/name: mariadb
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: liga-manager/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: liga-manger-redis-master
  namespace: "liga-manager"
  labels:
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 8.0.3
    helm.sh/chart: redis-21.2.13
    app.kubernetes.io/component: master
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: liga-manger
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: liga-manger-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: liga-manger
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 8.0.3
        helm.sh/chart: redis-21.2.13
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 2a9ab4a5432825504d910f022638674ce88eaefe9f9f595ad8bc107377d104fb
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: bdec350b84a1ace7cc118db113a21c9f160bde3425b07714e1c0c1da722621cf
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: liga-manger-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: liga-manger
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:8.0.3-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /bin/bash
                - -ec
                - "/health/ping_liveness_local.sh 5"
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - /bin/bash
                - -ec
                - "/health/ping_readiness_local.sh 1"
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: liga-manger-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: liga-manger-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: liga-manger-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: liga-manger
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: liga-manager/charts/liga-manager-ui/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: liga-manger-liga-manager-ui
  namespace: liga-manager
  labels:
    helm.sh/chart: liga-manager-ui-0.0.1
    app.kubernetes.io/name: liga-manager-ui
    app.kubernetes.io/instance: liga-manger
    app.kubernetes.io/version: "5.4.63"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/issuer: step-issuer
    cert-manager.io/issuer-group: certmanager.step.sm
    cert-manager.io/issuer-kind: StepClusterIssuer
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "liga-manager-ui.cluster.home"
      secretName: liga-manager-ui-tls
  rules:
    - host: "liga-manager-ui.cluster.home"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: liga-manger-liga-manager-ui
                port:
                  number: 80

NOTES:
Liga Manger installed !
